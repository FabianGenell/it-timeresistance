{"version":3,"file":"main.bundle.js","sources":["../src/scripts/components/favorites.js","../src/scripts/utils/utils.js","../src/scripts/utils/lazy-images.js","../src/entrypoints/theme.js"],"sourcesContent":["class FavoriteHandler {\n    constructor() {\n        this.favorites = this.fetchFavorites();\n        console.debug('Favorites', this.favorites);\n    }\n\n    fetchFavorites() {\n        const storedFavorites = localStorage.getItem('favorites');\n        let favorites = [];\n        if (storedFavorites) {\n            try {\n                const parsed = JSON.parse(storedFavorites);\n                if (Array.isArray(parsed)) {\n                    favorites = parsed;\n                }\n            } catch (error) {\n                console.error('Error parsing favorites from localStorage', error);\n            }\n        }\n        return favorites;\n    }\n\n    removeFavorite(favoriteItem) {\n        this.favorites = this.favorites.filter((favorite) => favorite.handle !== favoriteItem.handle);\n        console.debug('Favorites after removal', this.favorites);\n        this.updateLocalStorage(this.favorites);\n    }\n\n    addFavorite(favoriteItem) {\n        this.favorites.push(favoriteItem);\n        console.debug('Favorites after addition', this.favorites);\n        this.updateLocalStorage(this.favorites);\n    }\n\n    updateLocalStorage(favorites) {\n        localStorage.setItem('favorites', JSON.stringify(favorites));\n    }\n}\n\nconst favoriteHandler = new FavoriteHandler();\n\n/**\n * Represents the MainFavorites custom element.\n * @class\n * @extends HTMLElement\n */\nclass FavoriteProducts extends HTMLElement {\n    constructor() {\n        super();\n\n        this.productGrid = this.querySelector('[data-product-grid]');\n        this.spinner = this.querySelector('[data-spinner]');\n        this.emptyStateEl = this.querySelector('[data-empty-state]');\n\n        console.debug('FavoriteProducts', this.productGrid, this.spinner, this.emptyStateEl);\n\n        if (favoriteHandler.favorites.length > 0) {\n            this.fetchProducts();\n        } else {\n            this.emptyStateEl.classList.remove('hidden');\n            this.spinner.classList.add('hidden');\n        }\n    }\n\n    /**\n     * Fetches the HTML content of a product using its handle and variant ID if available.\n     *\n     * @param {Object} favorite - The favorite object containing handle and optional variantId.\n     * @returns {Promise<HTMLLIElement>} - A promise that resolves to an HTML list item element containing the fetched product HTML.\n     */\n    async fetchProductHTML(favorite) {\n        console.debug('fetchProductHTML', favorite);\n        let url = `/products/${favorite.handle}?view=card`;\n\n        if (favorite.variantId) {\n            url += `&variant=${favorite.variantId}`;\n        }\n\n        const productHTML = await fetch(url).then((res) => res.text());\n\n        console.debug('productHTML', productHTML);\n\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(productHTML, 'text/html');\n        const favoritesResult = doc.querySelector('.product-item');\n\n        console.debug('favoritesResult', favoritesResult);\n\n        return favoritesResult;\n    }\n\n    batchArray(arr, size) {\n        const batchedArray = [];\n        for (let i = 0; i < arr.length; i += size) {\n            batchedArray.push(arr.slice(i, i + size));\n        }\n        return batchedArray;\n    }\n\n    /**\n     * Fetches products and appends them to the product grid.\n     * @returns {Promise<Array<HTMLElement>>} An array of HTML elements representing the fetched products.\n     */\n    async fetchProducts() {\n        const batchedFavorites = this.batchArray(favoriteHandler.favorites, 4);\n        await Promise.all(\n            batchedFavorites.map(async (favoritesArray) => {\n                const productsHTML = await Promise.all(\n                    favoritesArray.map(async (favorite) => this.fetchProductHTML(favorite))\n                );\n                productsHTML.forEach((el) => {\n                    try {\n                        return this.productGrid.appendChild(el);\n                    } catch (error) {}\n                });\n                return productsHTML;\n            })\n        );\n        this.spinner.classList.add('hidden');\n    }\n}\n\ncustomElements.define('favorite-products', FavoriteProducts);\n\nclass AddFavorite extends HTMLElement {\n    constructor() {\n        super();\n\n        this.productHandle = this.dataset.productHandle;\n        this.variantId = this.dataset.variantId;\n\n        this.favoriteItem = {\n            handle: this.productHandle\n        };\n\n        if (this.variantId) {\n            this.favoriteItem.variantId = this.variantId;\n        }\n\n        this.addEventListener('click', this.handleClick.bind(this));\n        this.updateState();\n    }\n\n    get isFavorite() {\n        return favoriteHandler.favorites.some((favorite) => favorite.handle === this.productHandle);\n    }\n\n    handleClick() {\n        if (this.isFavorite) {\n            this.removeFavorite();\n        } else {\n            this.addFavorite();\n        }\n        this.updateState();\n    }\n\n    removeFavorite() {\n        favoriteHandler.removeFavorite(this.favoriteItem);\n    }\n\n    addFavorite() {\n        favoriteHandler.addFavorite(this.favoriteItem);\n    }\n\n    updateState() {\n        if (this.isFavorite) {\n            this.setAttribute('added', '');\n        } else {\n            this.removeAttribute('added');\n        }\n    }\n}\n\ncustomElements.define('add-favorite', AddFavorite);\n","/**\n * Returns a function that as long as it continues to be invoked, won't be triggered.\n * @param {Function} fn - Callback function.\n * @param {number} [wait=300] - Delay (in milliseconds).\n * @returns {Function}\n */\nexport function debounce(fn, wait = 300) {\n    let t;\n    return (...args) => {\n        clearTimeout(t);\n        t = setTimeout(() => fn.apply(this, args), wait);\n    };\n}\n\n/**\n * Transforms a string from kebab-case to PascalCase.\n * @param {string} str - The input string in kebab-case.\n * @returns {string} - The transformed string in PascalCase.\n */\nexport function kebabToPascalCase(str) {\n    return str\n        .split('-') // Split the string by hyphens\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1)) // Capitalize the first letter of each word\n        .join(''); // Join the words back together\n}\n\n/**\n * Logs a message to the DOM by creating an <h4> element with the message,\n * appending it to the body, and removing it after a specified delay.\n *\n * @param {string} message - The message to display in the <h4> element.\n * @param {number} [delay=3000] - The delay in milliseconds before removing the <h4> element. Default is 3000ms.\n */\nexport function logDOM(message, delay = 8000) {\n    if (window.Shopify.theme.role != 'development') return;\n    const h4 = document.createElement('h4');\n    h4.textContent = message;\n    h4.style.color = 'red';\n\n    const logDomContainer = document.querySelector('[data-dom-log]') || document.body;\n\n    logDomContainer.prepend(h4);\n\n    setTimeout(() => {\n        logDomContainer.removeChild(h4);\n    }, delay);\n}\n\n/**\n * Waits for the animation to end on the specified element.\n *\n * @param {HTMLElement} element - The element to wait for the animation to end on.\n * @param {Function} [callback] - Optional callback function to execute when the animation ends.\n * @returns {Promise<void>} A promise that resolves when the animation ends.\n */\nexport async function afterAnimationEnd(element, callback) {\n    return new Promise((resolve) => {\n        function onEnd(event) {\n            if (event.target !== element) return;\n\n            element.removeEventListener('animationend', onEnd);\n            element.removeEventListener('transitionend', onEnd);\n\n            if (typeof callback === 'function') {\n                callback();\n            } else {\n                console.warn('callback was not valid function', callback);\n            }\n\n            resolve();\n        }\n\n        element?.addEventListener('animationend', onEnd);\n        element?.addEventListener('transitionend', onEnd);\n    });\n}\n\n/**\n * Executes the provided callback function after the current call stack has cleared.\n *\n * @param {Function} callback - The function to be executed after the call stack clears.\n */\nexport function afterCallstack(callback) {\n    setTimeout(() => {\n        requestAnimationFrame(callback);\n    }, 0);\n}\n\nexport function formatMoney(cents, format = window.themeVariables.moneyFormat) {\n    if (typeof cents == 'string') {\n        cents = cents.replace('.', '');\n    }\n    let value = '';\n    const placeholderRegex = /\\{\\{\\s*(\\w+)\\s*\\}\\}/;\n\n    function formatWithDelimiters(number, precision = 2, thousands = ',', decimal = '.') {\n        if (isNaN(number) || number == null) {\n            return 0;\n        }\n\n        number = (number / 100.0).toFixed(precision);\n\n        const parts = number.split('.'),\n            dollars = parts[0].replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, `$1${thousands}`),\n            cents = parts[1] ? decimal + parts[1] : '';\n\n        return dollars + cents;\n    }\n\n    switch (format.match(placeholderRegex)[1]) {\n        case 'amount':\n            value = formatWithDelimiters(cents, 2);\n            break;\n        case 'amount_no_decimals':\n            value = formatWithDelimiters(cents, 0);\n            break;\n        case 'amount_with_comma_separator':\n            value = formatWithDelimiters(cents, 2, '.', ',');\n            break;\n        case 'amount_no_decimals_with_comma_separator':\n            value = formatWithDelimiters(cents, 0, '.', ',');\n            break;\n    }\n\n    return format.replace(placeholderRegex, value);\n}\n","import { afterCallstack } from './utils.js';\n\n/**\n * Checks if a lazy load image has alternate <source> elements and copies the\n * 'data-src' and 'data-srcset' selectors to 'src' and 'srcset' accordingly.\n * @param {Element} img - Image element.\n */\nexport function setImageSources(img) {\n    const setImageAttr = (el) => {\n        if (el.dataset.src && !el.src) {\n            el.src = el.dataset.src;\n        }\n\n        if (el.dataset.srcset && !el.srcset) {\n            el.srcset = el.dataset.srcset;\n        }\n    };\n\n    if (img.parentNode.tagName === 'PICTURE') {\n        Array.from(img.parentNode.children).forEach((el) => {\n            setImageAttr(el);\n        });\n    } else {\n        setImageAttr(img);\n    }\n}\n\nfunction setImageSourceArray(imgElArray) {\n    return imgElArray.forEach((img) => setImageSources(img));\n}\n\n/**\n * Initialises lazy load images.\n */\nexport function initLazyImages() {\n    if ('loading' in HTMLImageElement.prototype === false && 'IntersectionObserver' in window) {\n        console.log('intersection observer');\n        const io = new IntersectionObserver(\n            (entries, observer) => {\n                entries.forEach((entry) => {\n                    if (entry.isIntersecting) {\n                        const img = entry.target;\n                        setImageSources(img);\n                        observer.unobserve(img);\n                    }\n                });\n            },\n            { rootMargin: '0px 0px 500px 0px' }\n        );\n\n        document.querySelectorAll('[loading=\"lazy\"]').forEach((img) => {\n            io.observe(img);\n        });\n    } else {\n        // If native lazy load supported or IntersectionObserver not supported (legacy browsers).\n        const imagesOnDOMLoad = [];\n        const imagesOnLoad = [];\n\n        document.querySelectorAll('[loading=\"lazy\"], [data-src]').forEach((img) => {\n            if (img.hasAttribute('data-load-dom')) {\n                imagesOnDOMLoad.push(img);\n            } else if (img.hasAttribute('data-load-load')) {\n                imagesOnLoad.push(img);\n            } else if (img.hasAttribute('data-load-manual')) {\n                return;\n            } else {\n                setImageSources(img);\n            }\n        });\n\n        loadImagesOnDOMLoaded(imagesOnDOMLoad);\n\n        loadImagesOnLoaded(imagesOnLoad);\n    }\n}\n\nfunction loadImagesOnDOMLoaded(imageElArray) {\n    console.debug('loadImagesOnDOMLoaded', imageElArray);\n    const execute = () => afterCallstack(() => setImageSourceArray(imageElArray));\n\n    if (document.readyState != 'loading') {\n        return execute();\n    }\n\n    document.addEventListener('DOMContentLoaded', execute);\n}\n\nfunction loadImagesOnLoaded(imageElArray) {\n    console.debug('loadImagesOnLoaded', imageElArray);\n    const execute = () => afterCallstack(() => setImageSourceArray(imageElArray));\n\n    if (document.readyState == 'complete') {\n        return execute();\n    }\n\n    window.addEventListener('load', execute);\n}\n\n//Loads all images manually (load,dom,manual, etc.)\nexport function loadManualImages(container = document) {\n    console.debug('loadManualImages', container);\n    const imageEls = container.querySelectorAll('[loading=\"lazy\"]');\n\n    setImageSourceArray(imageEls);\n}\n\nafterCallstack(initLazyImages);\ndocument.addEventListener('DOMContentLoaded', initLazyImages);\n","/* \nimport '../scripts/utils/theme-functions.js';\nimport '../scripts/utils/css-helpers.js';\n*/\n\nwindow.theme = {};\n\nimport '../scripts/components/';\nimport '../scripts/utils/lazy-images.js';\n\nconsole.log('main.bundle.js loaded');\n\n// Dispatch event when theme bundle is loaded\ndocument.dispatchEvent(new CustomEvent('theme:loaded'));\n"],"names":["FavoriteHandler","storedFavorites","favorites","parsed","error","favoriteItem","favorite","favoriteHandler","FavoriteProducts","url","productHTML","res","favoritesResult","arr","size","batchedArray","i","batchedFavorites","favoritesArray","productsHTML","el","AddFavorite","afterCallstack","callback","setImageSources","img","setImageAttr","setImageSourceArray","imgElArray","initLazyImages","io","entries","observer","entry","imagesOnDOMLoad","imagesOnLoad","loadImagesOnDOMLoaded","loadImagesOnLoaded","imageElArray","execute"],"mappings":"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"}