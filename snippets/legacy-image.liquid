{% doc %}
  Renders an image with wrapper, optional placeholder, and performance optimizations

  @param {object} [image] - The image object to render
  @param {string} [sizes] - Responsive image sizes for the 'sizes' attribute
  @param {number} [sizes_px] - Fixed width in pixels (alternative to sizes)
  @param {string} [aspect_ratio] - Image aspect ratio ('portrait', 'landscape', 'square', 'natural')
  @param {string} [focal_point] - Focal point source ('image_presentation', 'center', 'top', 'right', 'bottom', 'left')
  @param {string} [focal_alignment] - CSS object-position value based on focal point
  @param {string} [wrapper_class] - CSS classes for the image wrapper
  @param {string} [image_class] - CSS classes for the image element
  @param {boolean} [prioritize_loading] - If true, skip lazy loading
  @param {boolean} [animate] - Enable image animations
  @param {boolean} [include_placeholder] - Show placeholder if no image
  @param {string} [placeholder_name] - Shopify placeholder SVG name
  @param {string} [placeholder_natural_fallback_ratio] - Fallback aspect ratio for placeholder
  @param {string} [fallback_alt] - Alt text fallback if image has no alt
  @param {boolean} [no_crop] - Load full image and crop with CSS
  @param {string} [object_fit] - CSS object-fit property value
  @param {boolean} [no_lazy_load] - Disable lazy load animations
  @param {string} [src_set_type] - Optimize srcset ('grid', 'full-width', 'thumbnail')
  @param {string} [load_type] - Control loading timing ('dom', 'load', 'manual')

  @example Basic usage
  {% render 'legacy-image', image: product.featured_image, sizes: '50vw' %}

  @example With wrapper and animation
  {% render 'legacy-image',
    image: block.settings.image,
    aspect_ratio: 'landscape',
    wrapper_class: 'hero-image',
    animate: true
  %}
{% enddoc %}

{%- liquid

  if image != image.preview_image and image.preview_image
    comment
      hack - nicer way?
    endcomment
    assign image = image.preview_image
  endif

  if sizes_px
    assign sizes = sizes_px | append: 'px'
  endif

  if focal_point == 'image_presentation' and image.presentation.focal_point == '50.0% 50.0%'
    assign focal_point = 'center'
  endif

  if focal_point
    if focal_point == 'image_presentation'
      assign focal_alignment = image.presentation.focal_point
    else
      assign focal_alignment = focal_point | replace: '_', ' '
    endif
  endif
-%}

{%- if image != blank -%}
  <div
    class="
      image
      {{ wrapper_class }}
      {% if aspect_ratio != blank and aspect_ratio != 'natural' %}aspect-ratio--{{ aspect_ratio }}{% endif %}
      {% if animate %}image--animate{% endif %}
      {% unless no_lazy_load %}animation--lazy-load{% endunless %}
    "
    style="
      {%- if focal_alignment -%}--focal-alignment: {{ focal_alignment }};{%- endif -%}
      {%- if object_fit != blank and aspect_ratio != 'natural' -%}--object-fit: {{ object_fit }};{%- endif -%}
    "
  >
    {%
      render 'responsive-image' with
      image: image,
      sizes: sizes,
      prioritize_loading: prioritize_loading,
      aspect_ratio: aspect_ratio,
      focal_point: focal_point,
      focal_alignment: focal_alignment,
      no_crop: no_crop,
      object_fit: object_fit,
      fallback_alt: fallback_alt,
      src_set_type: src_set_type,
      class_name: image_class,
      load_type: load_type
    %}
  </div>
{%- elsif include_placeholder -%}
  {%- assign natural_fallback = placeholder_natural_fallback_ratio | default: 'square' -%}

  {%-
    render 'placeholder-image' with
    wrapper_class: wrapper_class,
    placeholder_name: placeholder_name,
    aspect_ratio: aspect_ratio,
    natural_fallback_ratio: natural_fallback
  -%}
{%- endif -%}
